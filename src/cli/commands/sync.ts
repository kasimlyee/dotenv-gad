import { Command } from "commander";
import chalk from "chalk";
import ora from "ora";
import { writeFileSync } from "fs";
import { loadSchema } from "./utils.js";
import { SchemaRule } from "../../index.js";

export default function (program: Command) {
  return new Command("sync")
    .description("Genearte/update .env.example file")
    .option("--output <file>", "Output file path", ".env.example")
    .action(async (options, command) => {
      const rootOpts = command.parent.opts();
      const spinner = ora("Generating .env.example.......").start();

      try {
        const schema = await loadSchema(rootOpts.schema);
        let exampleContent = "# Auto-generated by dotenv-guard\n\n";

        Object.entries(schema).forEach(([key, rule]) => {
          if ((rule as SchemaRule).sensitive) return;

          exampleContent += `# ${
            (rule as SchemaRule).docs || "No description available"
          }\n`;
          exampleContent += `# Type: ${(rule as SchemaRule).type}\n`;
          if ((rule as SchemaRule).default !== undefined) {
            exampleContent += `# Default: ${JSON.stringify(
              (rule as SchemaRule).default
            )}\n`;
          }
          exampleContent += `${key}=${
            (rule as SchemaRule).default
              ? JSON.stringify((rule as SchemaRule).default)
              : ""
          }\n\n`;
        });

        writeFileSync(options.output, exampleContent.trim());
        spinner.succeed(
          chalk.green(`Generated ${options.output} successfully!`)
        );
      } catch (error) {
        spinner.fail(chalk.red(`Failed to generate .env.example`));
        console.error(error);
        process.exit(1);
      }
    });
}
